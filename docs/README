*************************************************
Julian Sovernigo            0948924
gsoverni@mail.uoguelph.ca
CIS2520_F16                 A4: AVL Tree 

11/28/2016
*************************************************

******************
Pledge of Honesty
******************
    By handing in this assignment with this README file, I
assert that I have sole access and control over my submission,
and that this submission contains entirely my own work. I
affirm that I have not colaborated in the creation of this code,
nor have I taken any segment of code that I do not have express
ownership or permission to use.

************
Compilation
************

1- cd to the root folder of the program
2- type 'make' in the root folder.
	a- this will make the executable avltree
3- to remove resources generated by compilation, please type 'make clean'

********************
Running the program
********************

1- cd to the root folder of the program
2- execute avltree
	a- a menu with seven options will be displayed.  A prompt will appear in the bottom corner,
		reading avl\> ; type any command's number in the prompt to execute it.
3- the output will be dependant on the option selected.  There are several:
	1. Initialization
	2. Find
	3. Insert
	4. Remove
	5. Check Height and Size
	6. Find All (above a given frequency)
	7. Exit
	avl/> 
	executing the command will produce strandard output to the console screen.

********
Testing
********

For an example of generation of a test file, please see genTest.py.

Files found in assets/ contain test values used, containing several different data formats.

TEST:	Tested initialization with the files in the assets/ folder.
RESULT:	Created trees with approximately correct height for all (textfile impossible.txt contains
		well over 174,000 data entries.).

TEST:	attempted to add an existing node
RESULT:	tree's node->data->counter was incrimented.

TEST:	attempted to add new node.
RESULT:	tree was given new node which was inserted and balanced.

TEST:	requested print out of all nodes above frequency n = 1
RESULT:	using impossible.txt, ~1400 nodes were printed out (correct, as that is how many UNIQUE
		nodes occur.)

************
Limitations
************

	Due to the infuriating issues with traversing large trees recursively, there are certain 
	restrictions on the speed of the creation, balancing, removal, addition, or other related
	modification performed on the tree structure.  While there is certainly room for improvement
	in my personal algorithms, and those derived from other sources, there is only so much that
	can be done regarding recursive algorithms.
